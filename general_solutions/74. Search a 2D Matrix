class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:

      """
        Time of Naive Approach: O(n * m)
          Space: O(1)

          Time of Logarithmic Approach: O(log(n + m)
          Space: O(1)
      """
        
        # # Naive Approach
        # for r in range(len(matrix)):
        #     for c in range(len(matrix[0])):
        #         if matrix[r][c] == target:
        #             return True
        # return False
    
        # Logarithmic Approach O(log(n + m))
        """
        Using Binary Search.
        1. Consider the matrix from top to bottom.
        2. Find the rightmost row in which the target is located at.
        3. Perform binary search on that row to find the target.
        """
        
        ROW, COL = len(matrix), len(matrix[0])
        
        top, bot = 0, ROW - 1
        
        while top <= bot:
            mid_row = (top + bot) // 2
            if target > matrix[mid_row][-1]:
                top = mid_row + 1
                
            elif target < matrix[mid_row][0]:
                bot = mid_row - 1
                
            else:   # row found: go ahead and locate the target
                break
                
        if not (top <= bot): return False
        
        row = (top + bot) // 2
        
        l, r = 0, COL - 1
        while l <= r:
            m = (l + r) // 2
            if target > matrix[row][m]:
                l = m + 1
                
            elif target < matrix[row][m]:
                r = m - 1
                
            else:
                return True
            
        return False
